// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Trainers.LightGbm;

//using pre-release MLOps.NET
using MLOps.NET;
using MLOps.NET.SQLite;


namespace TaxiFarePrediction_SQLiteML.ConsoleApp
{
    class Program
    {
        static async Task Main(string[] args)
        {
            var mlLifeCycleManager = new MLLifeCycleManager().UseSQLite();
            var experimentId = await mlLifeCycleManager.CreateExperimentAsync("TaxiFare Predictor");
            var runId = await mlLifeCycleManager.CreateRunAsync(experimentId);
            var mlContext = new MLContext(seed: 1);


            //load the data
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                 path: "taxifares.csv",
                                 hasHeader: true,
                                 separatorChar: ',',
                                 allowQuoting: true,
                                 allowSparse: false);





            //transform // Build training pipeline// Data process configuration with pipeline data transformations 
            var dataProcessPipeline = mlContext.Transforms.Categorical.OneHotEncoding(new[] { new InputOutputColumnPair("vendor_id", "vendor_id"), new InputOutputColumnPair("payment_type", "payment_type") })
                                      .Append(mlContext.Transforms.Concatenate("Features", new[] { "vendor_id", "payment_type", "rate_code", "passenger_count", "trip_time_in_secs", "trip_distance" }));






            //train // Set the training algorithm 
            var trainer = mlContext.Regression.Trainers.LightGbm(new LightGbmRegressionTrainer.Options() { NumberOfIterations = 200, LearningRate = 0.09041387f, NumberOfLeaves = 31, MinimumExampleCountPerLeaf = 50, UseCategoricalSplit = true, HandleMissingValue = true, UseZeroAsMissingValue = true, MinimumExampleCountPerGroup = 100, MaximumCategoricalSplitPointCount = 32, CategoricalSmoothing = 10, L2CategoricalRegularization = 5, Booster = new GradientBooster.Options() { L2Regularization = 0, L1Regularization = 1 }, LabelColumnName = "fare_amount", FeatureColumnName = "Features" });


            IEstimator<ITransformer> trainingPipeline = dataProcessPipeline.Append(trainer);

            Console.WriteLine("=============== Training  model ===============");
            Console.WriteLine("Starting training");

            ITransformer model = trainingPipeline.Fit(dataView);

            Console.WriteLine("=============== End of training process ===============");







            //evaluate



            var crossValidationResults = mlContext.Regression.CrossValidate(dataView, trainingPipeline, numberOfFolds: 5, labelColumnName: "fare_amount");
            //  var metrics = mlContext.Regression.Evaluate(   BinaryClassification.Evaluate(predicitions, labelColumnName: "Sentiment")



            var L1 = crossValidationResults.Select(r => r.Metrics.MeanAbsoluteError);
            var L2 = crossValidationResults.Select(r => r.Metrics.MeanSquaredError);
            var RMS = crossValidationResults.Select(r => r.Metrics.RootMeanSquaredError);
            var lossFunction = crossValidationResults.Select(r => r.Metrics.LossFunction);
            var R2 = crossValidationResults.Select(r => r.Metrics.RSquared);

            Console.WriteLine($"*************************************************************************************************************");
            Console.WriteLine($"*       Metrics for Regression model      ");
            Console.WriteLine($"*------------------------------------------------------------------------------------------------------------");
            Console.WriteLine($"*       Average L1 Loss:       {L1.Average():0.###} ");
            Console.WriteLine($"*       Average L2 Loss:       {L2.Average():0.###}  ");
            Console.WriteLine($"*       Average RMS:           {RMS.Average():0.###}  ");
            Console.WriteLine($"*       Average Loss Function: {lossFunction.Average():0.###}  ");
            Console.WriteLine($"*       Average R-squared:     {R2.Average():0.###}  ");
            Console.WriteLine($"*************************************************************************************************************");




            //log metrics           //Log metrics
            //await mlLifeCycleManager.LogMetricAsync(runId,
            //    nameof(metrics.Accuracy),
            //    metrics.Accuracy);


            await mlLifeCycleManager.LogMetricAsync(runId,
            "Average L1 Loss:", L1.Average());

            await mlLifeCycleManager.LogMetricAsync(runId,
            "Average L2 Loss:", L2.Average());

            await mlLifeCycleManager.LogMetricAsync(runId,
            "Average RMS:", RMS.Average());

            await mlLifeCycleManager.LogMetricAsync(runId,
            "Average Loss Function:", lossFunction.Average());

            await mlLifeCycleManager.LogMetricAsync(runId,
            "Average R-squared:", R2.Average());



            //Upload the model (artifact)

            //Check - is current model better than production model?

            //Save model as artifact for run


            // Save/persist the trained model to a .ZIP file
            //Console.WriteLine($"=============== Saving the model  ===============");
            //mlContext.Model.Save(model, dataView.Schema, GetAbsolutePath(modelRelativePath));
            //Console.WriteLine("The model is saved to {0}", GetAbsolutePath(modelRelativePath));





            #region testing predictin


            // You can replace this with new test data (hardcoded or from end-user application)
            //  ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false).First();
            // Create single instance of sample data from first line of dataset for model input
            //  ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);
            // Make a single prediction on the sample data and print results
            //var predictionResult = ConsumeModel.Predict(sampleForPrediction);

            //Console.WriteLine("Using model to make single prediction -- Comparing actual Fare_amount with predicted Fare_amount from sample data...\n\n");
            //Console.WriteLine($"vendor_id: {sampleForPrediction.Vendor_id}");
            //Console.WriteLine($"rate_code: {sampleForPrediction.Rate_code}");
            //Console.WriteLine($"passenger_count: {sampleForPrediction.Passenger_count}");
            //Console.WriteLine($"trip_time_in_secs: {sampleForPrediction.Trip_time_in_secs}");
            //Console.WriteLine($"trip_distance: {sampleForPrediction.Trip_distance}");
            //Console.WriteLine($"payment_type: {sampleForPrediction.Payment_type}");
            //Console.WriteLine($"\n\nActual Fare_amount: {sampleForPrediction.Fare_amount} \nPredicted Fare_amount: {predictionResult.Score}\n\n");
            //Console.WriteLine("=============== End of process, hit any key to finish ===============");

            #endregion


            Console.ReadKey();
        }


        // for saving
        //public static string GetAbsolutePath(string relativePath)
        //{
        //    FileInfo _dataRoot = new FileInfo(typeof(Program).Assembly.Location);
        //    string assemblyFolderPath = _dataRoot.Directory.FullName;

        //    string fullPath = Path.Combine(assemblyFolderPath, relativePath);

        //    return fullPath;
        //}

    }
}
